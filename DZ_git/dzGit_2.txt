1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?
Чтобы отказаться от изменений в файле (файлах) в рабочем каталоге и вернуть их к состоянию последнего коммита, можно использовать команду git checkout -- <file> для каждого файла, которые мы хотим отменить. Например, git checkout -- myfile.txt.

2.Как вернуть файл из индекса в рабочий каталог?
Чтобы вернуть файл из индекса в рабочий каталог, можно использовать команду git reset HEAD <file>. Это уберет файл из индекса, но сохранит его изменения в рабочей директории. Теперь можно продолжить работу с файлом и внести изменения.


3.Как отменить ошибочный commit ?
Для отмены ошибочного коммита можно использовать команду git revert <commit>. Она создаст новый коммит, который отменяет изменения, внесенные указанным коммитом. Таким образом, история коммитов сохраняется, но нежелательные изменения отменяются.

4.Как создать новую ветку и переключится в нее?
Чтобы создать новую ветку и переключиться на нее, можно использовать команду git checkout -b <branch>. Она создаст новую ветку с указанным именем и автоматически переключит на нее. Например, git checkout -b new-feature.

5.В чем отличение между fast-forward merge and non fast-forfard merge?
Fast-forward merge и non fast-forward merge отличаются в том, как происходит слияние веток. Fast-forward merge происходит, когда история коммитов в сливаемой ветке полностью находится "впереди" текущей ветки, и Git может просто переместить указатель текущей ветки на последний коммит из сливаемой ветки. В этом случае история коммитов остается линейной и простой.
Non fast-forward merge происходит, когда история коммитов в сливаемой ветке имеет общие коммиты с текущей веткой. В этом случае Git создает новый коммит слияния, который объединяет изменения из обеих веток. Это создает дополнительный коммит слияния и сохраняет полную историю изменений из обеих веток.

6.Когда может возникнуть конфликт слияния веток, как  его разрешить?
Конфликт слияния веток может возникнуть, когда Git не может автоматически объединить изменения из двух веток. Это происходит, когда две ветки вносят изменения в одни и те же строки кода. Для разрешения конфликта нам нужно вручную отредактировать конфликтующие файлы, разрешить конфликты и выбрать, какие изменения сохранить. После разрешения конфликта мы должны добавить изменения в индекс с помощью команды git add <file> и закоммитить изменения.

7.Можно ли удалить ветку? Как? 
Да, ветку можно удалить с помощью команды git branch -d <branch>. Она удалит указанную ветку, если она уже была слита с другой веткой. Если ветка содержит незакоммиченные изменения, то удаление будет отменено. Если мы хотим удалить ветку без проверки состояния, можно использовать команду git branch -D <branch>.